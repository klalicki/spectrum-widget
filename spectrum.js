//debugging function for test purposes - setting 'verbose' variable enables or disables console logging globally
var verbose = true;
const dB = (str) => {
    if (verbose) {
        console.log(str)
    }
}
//actual production data below
let wavelengths = []
for (let i = 300; i <= 1100; i = i + 5) {
    wavelengths.push(i);
}
let datasetTEST = [
    ["1", "1", "1", "1", "2", "2", "2", "2", "4", "4", "4", "4", "8", "8", "8", "8", "10", "10", "12", "12", "10", "10", "8", "8", "8", "8", "4", "4", "4", "4", "2", "2", "2", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "2", "2", "2", "2", "4", "4", "4", "4", "8", "8", "8", "8", "10", "10", "12", "12", "10", "10", "8", "8", "8", "8", "4", "4", "4", "4", "2", "2", "2", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "2", "2", "2", "2", "4", "4", "4", "4", "8", "8", "8", "8", "10", "10", "12", "12", "10", "10", "8", "8", "8", "8", "4", "4", "4", "4", "2", "2", "2", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "2", "2", "2", "2", "4", "4", "4", "4", "8", "8", "8", "8", "10", "10", "12", "12", "10", "10", "8", "8", "8", "8", "4", "4", "4", "4", "2", "2", "2", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"]
]

const inputData={
    "wavelength":[300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999],
    "380-385":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00011179,0.00091385,0.0015003,0.0019766,0.0020298,0.002967,0.0042541,0.0058487,0.0080175,0.010152,0.013641,0.017802,0.022934,0.029361,0.037291,0.046282,0.057682,0.072197,0.088092,0.10379,0.11634,0.12478,0.12144,0.10684,0.09103,0.075777,0.06095,0.049289,0.04191,0.037104,0.032915,0.029849,0.026402,0.022317,0.018735,0.015068,0.011937,0.0098975,0.0083173,0.0058639,0.0045277,0.005094,0.0047592,0.0038141,0.0031262,0.0026015,0.0023388,0.0020084,0.0014178,0.00071117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "395-400":[0.0000153,0.000241,0.000135,0.000321,0.000264,0.000132,0.000105,0.000258,0.000452,0,0,0.000234,0.0000621,0.0000537,0.0000024,0.000181,0,0,0.00056,0.000733,0.000433,0.000511,0.000679,0.000319,0.000281,0.000503,0,0,0.00116,0.000521,0,0.000203,0.000927,0.000919,0.000612,0,0,0.000587,0.000223,0,0,0.000354,0.000118,0,0,0,0.000226,0.00107,0.000981,0.00062,0.00117,0.00198,0.00163,0.00103,0.000955,0.000837,0.00101,0.00126,0.00103,0.000729,0.000785,0.00135,0.00164,0.00102,0.000753,0.000764,0.0008,0.00126,0.00179,0.00256,0.00279,0.00327,0.00375,0.00402,0.00429,0.00425,0.00561,0.00688,0.00771,0.00888,0.0108,0.013,0.0156,0.0186,0.0222,0.0272,0.0335,0.0418,0.0504,0.0587,0.07,0.0854,0.101,0.119,0.139,0.16,0.177,0.195,0.209,0.211,0.207,0.197,0.183,0.164,0.141,0.12,0.102,0.0877,0.0766,0.0676,0.06,0.0533,0.0475,0.0421,0.0369,0.032,0.027,0.0232,0.0197,0.0164,0.0144,0.0129,0.0115,0.00981,0.00872,0.00808,0.00739,0.00625,0.00514,0.00492,0.00448,0.00357,0.00302,0.00312,0.00281,0.0025,0.00219,0.00197,0.00235,0.00194,0.00145,0.00159,0.00143,0.00113,0.00106,0.000952,0.00107,0.00118,0.000919,0.000456,0.000468,0.00101,0.00124,0.000676,0.000273,0.000667,0.000558,0.000288,0,0.000082,0.000712,0.000578,0.000169,0.000252,0.000524,0.000397,0.000445,0.000613,0.000885,0.000943,0.000802,0.000484,0.0000518,0.00000382,0.0000694,0.00000477,0,0.00016,0.000367,0.000433,0.000522,0.000241,0.000218,0.000257,0,0,0.0000896,0.0000554,0,0.0000183,0.000216,0.000146,0.000239,0.0000867,0.0000173,0.000158,0.000173,0.0000369,0,0,0.0000346,0,0,0.000252,0.000307,0.000108,0.000137,0.000323,0.000249,0.00000802,0,0,0,0.0000846,0.000128,0,0,0.0000377,0.000187,0.000308,0.000288,0.0000784,0,0,0,0,0.0000764,0,0,0,0,0.0000109,0.000149,0.00039,0.000225,0.00000184,0.00007,0.000262,0.000394,0.000224,0.00000234,0,0,0.0000798,0.00000601,0,0,0,0,0,0,0,0.0000143,0.0000763,0,0.00000714,0.000297,0.000509,0,0,0.000264,0.000361,0.000246,0.0000918,0.000128,0.00000455,0,0,0.0000413,0.0002,0.00048,0.000308,0,0.0000903,0.000264,0.000268,0.000147,0.0000804,0.000139,0,0,0,0.0000891,0.000241,0.000232,0.000124,0.000283,0.000245,0,0,0,0,0,0,0.0000475,0.000131,0.0000924,0,0,0,0,0,0,0.0000842,0,0,0,0,0.0000252,0.0000361,0,0,0,0,0,0,0,0.0000137,0.000173,0.00000985,0,0,0.000163,0.000117,0.00000155,0,0,2.43e-7,0.0000301,0.000119,7.34e-8,0,0,0,0,0,0,0,0,0,0,0,0.0000464,0.000175,0.000136,0.0000371,0,0,0,0,0,0,0.000121,0.000276,0.000297,0.0000249,0,0,0,0,0,0,0,0,0,0,0,0,0.00000657,0,0,0.0000248,0.000249,0.0000414,0,0,0,0,0,0,0,0,0.0000903,0.000232,0.000166,0.00000338,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0000387,0.0000952,0.0000546,0,0,0.0000964,0,0,0,0.0000019,0.000149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0000284,0,0,0,0,0,0,0,0,0,0,0,0,0.0000375,0,0,0,0,0,0,0,0,0.000315,0.000396,0.000031,0,0,0,0,0,0,0.000105,0.000521,0.000036,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00000126,0.000124,0.000293,0,0,0.000369,0.000493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0000286,0.000243,0.000182,0,0,0,0.000119,0.00016,0.000117,0,0,0,0.000571,0.000549,0.000896,0.000505,0,0,0.0000643,0.000317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "430":[0,0.0000102,0.000379,0.000672,0.000461,0.000359,0.00026,0.000212,0.000308,0.000815,0.000851,0.00042,0.000358,0.000361,0.000273,0.000271,0.000227,0,0,0,0,0,0,0,0,0.00056,0,0.000154,0.00000943,0,0.000276,0.000573,0.000816,0.00044,0.000679,0.00111,0.000891,0.000474,0.00044,0.000722,0.00113,0.000882,0.000965,0.00154,0.00178,0.00168,0.00102,0.000883,0.000691,0.000782,0.000946,0.00121,0.0016,0.00231,0.00218,0.0019,0.00167,0.00178,0.00161,0.00134,0.00139,0.00153,0.00168,0.00184,0.002,0.00196,0.00182,0.00153,0.00172,0.00184,0.00218,0.00275,0.00283,0.00303,0.0032,0.0032,0.00287,0.00263,0.00244,0.00286,0.00314,0.00323,0.00378,0.00412,0.00449,0.00446,0.00397,0.004,0.00377,0.00352,0.00399,0.00427,0.00457,0.00491,0.00526,0.00569,0.00619,0.00658,0.00706,0.00748,0.00799,0.00876,0.00941,0.0106,0.0119,0.0136,0.0157,0.0177,0.0206,0.0246,0.0293,0.035,0.0415,0.05,0.0605,0.0738,0.0892,0.106,0.125,0.151,0.182,0.215,0.253,0.302,0.36,0.421,0.483,0.543,0.611,0.659,0.673,0.679,0.661,0.612,0.553,0.486,0.419,0.356,0.302,0.263,0.234,0.211,0.192,0.174,0.157,0.141,0.126,0.11,0.0965,0.0835,0.0718,0.0617,0.0532,0.0465,0.0411,0.0363,0.0326,0.0294,0.0267,0.0239,0.0213,0.0191,0.017,0.0152,0.0136,0.0123,0.011,0.00953,0.00851,0.00761,0.00684,0.00627,0.00562,0.00506,0.00465,0.00429,0.00398,0.00351,0.00325,0.00304,0.00277,0.00247,0.00226,0.0022,0.00222,0.00199,0.00174,0.00151,0.00142,0.00143,0.00135,0.00127,0.00112,0.001,0.000949,0.000953,0.000913,0.000909,0.000833,0.000788,0.000755,0.000735,0.000735,0.000757,0.000744,0.000706,0.000655,0.000649,0.000662,0.000656,0.000642,0.000671,0.000639,0.000589,0.000512,0.000433,0.00041,0.000389,0.000371,0.000375,0.000333,0.000339,0.000449,0.000547,0.000572,0.000551,0.00058,0.000635,0.000644,0.000601,0.000536,0.000494,0.000439,0.000389,0.000398,0.000388,0.000377,0.000336,0.000399,0.000429,0.000382,0.000398,0.000398,0.000285,0.000239,0.000238,0.000267,0.000311,0.000259,0.000179,0.000194,0.00022,0.00032,0.000354,0.000355,0.000334,0.000295,0.000368,0.000485,0.000504,0.000448,0.000328,0.000139,0.000185,0.000217,0.000226,0.000194,0.000228,0.000249,0.000287,0.000273,0.000192,0.000145,0.000119,0.0000844,0.0000483,0.0000459,0.0000242,0.000111,0.00013,0.000103,0.0000356,0.00000445,8.72e-7,0.0000547,0.000151,0.000162,0.000117,0.0000428,0.0000292,0.0000547,0.000119,0.0000884,0.000128,0.000162,0.000154,0.000128,0.000183,0.000197,0.000228,0.000214,0.0000834,0.0000599,0.000055,0.0000368,0.0000406,0.0000645,0.0000422,0,1.69e-7,0.0000784,0.000151,0.0000899,0.00000868,0,0,0.0000188,0,0,0,0,0,0.00000145,0.0000905,0.000173,0.000121,0.0000997,0.0000344,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00000756,0.0000435,0.0000443,0.0000153,0.00000909,0,0,0,0,0,0,0,0,0.0000456,0.000125,0.0000869,0.0000381,0.0000627,0.0000761,0.0000415,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0000208,0.0000068,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000138,0.000176,0.0000189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "450":[0.000219,0.000477,0.000852,0.00115,0.000829,0.000871,0.000978,0.000637,0.000479,0.000932,0.000857,0.000429,0.000531,0.000588,0.000414,0.000428,0.000608,0.000545,0.000452,0.000458,0.000609,0.000744,0.000786,0.000429,0.000241,0.000676,0,0.000251,0.000176,0.0000722,0.00123,0.000818,0.000903,0.000641,0.000773,0.00116,0.00103,0.00065,0.00068,0.000933,0.00125,0.00104,0.000938,0.00121,0.0014,0.00142,0.000958,0.00107,0.00117,0.00113,0.00104,0.00108,0.00113,0.00151,0.00146,0.00134,0.00124,0.00137,0.00129,0.00109,0.00108,0.00121,0.00139,0.00156,0.00172,0.00175,0.00174,0.00158,0.00167,0.00173,0.00192,0.00214,0.00203,0.00209,0.0022,0.00213,0.00181,0.00158,0.00135,0.00157,0.00172,0.00168,0.0019,0.00191,0.00203,0.00207,0.00192,0.00209,0.00197,0.00171,0.00185,0.00183,0.00184,0.00182,0.00187,0.00199,0.00213,0.00217,0.00232,0.00247,0.00254,0.00284,0.00291,0.00305,0.00313,0.00327,0.00335,0.00325,0.00327,0.00348,0.00356,0.0037,0.00367,0.00378,0.0039,0.00418,0.00453,0.00477,0.00526,0.00604,0.00695,0.00782,0.00865,0.00977,0.0111,0.0124,0.0137,0.0154,0.0179,0.0209,0.0238,0.0279,0.0327,0.0378,0.044,0.0511,0.0592,0.0676,0.0764,0.0869,0.0991,0.113,0.128,0.143,0.159,0.177,0.197,0.22,0.247,0.275,0.303,0.33,0.355,0.378,0.399,0.41,0.411,0.404,0.391,0.371,0.343,0.318,0.291,0.261,0.233,0.211,0.191,0.172,0.157,0.143,0.131,0.121,0.111,0.101,0.0914,0.083,0.0746,0.0663,0.0592,0.0527,0.0468,0.0416,0.0369,0.033,0.03,0.0272,0.0244,0.0221,0.0202,0.0184,0.0165,0.015,0.0135,0.0122,0.011,0.01,0.00898,0.00813,0.00738,0.00669,0.00608,0.0056,0.00519,0.00481,0.00446,0.00412,0.00379,0.00349,0.00321,0.00293,0.00268,0.00249,0.00233,0.00221,0.0021,0.00196,0.00186,0.00177,0.00169,0.00161,0.0015,0.00143,0.00144,0.00143,0.0014,0.00135,0.00134,0.00133,0.00129,0.0012,0.0011,0.00102,0.000945,0.000875,0.000837,0.000804,0.000798,0.000769,0.000805,0.000828,0.000803,0.000815,0.000808,0.000719,0.000644,0.000592,0.000575,0.000582,0.000574,0.000607,0.000702,0.000725,0.000752,0.00078,0.000832,0.000829,0.000748,0.000752,0.00082,0.000808,0.000733,0.000678,0.000621,0.000661,0.000602,0.00056,0.000526,0.00053,0.000515,0.000555,0.000577,0.000549,0.000549,0.000563,0.000547,0.000489,0.000424,0.000344,0.00036,0.000372,0.000401,0.000424,0.000451,0.000447,0.000476,0.000502,0.000483,0.000464,0.000452,0.000479,0.000504,0.000536,0.000488,0.000504,0.000528,0.000508,0.000468,0.000483,0.00046,0.000446,0.000428,0.000351,0.000357,0.000349,0.00032,0.000321,0.00037,0.000372,0.000323,0.000272,0.000313,0.000362,0.000342,0.000312,0.000306,0.000408,0.000472,0.00044,0.000433,0.000471,0.000483,0.000535,0.000471,0.000486,0.0005,0.000444,0.000409,0.000339,0.00024,0.000251,0.000176,0.000194,0.000232,0.000262,0.000283,0.000308,0.000291,0.000321,0.000286,0.000265,0.000246,0.000266,0.000276,0.000326,0.000384,0.000441,0.000493,0.000506,0.000457,0.000428,0.000402,0.000384,0.000321,0.000255,0.00022,0.000255,0.000303,0.000283,0.00026,0.000284,0.000309,0.000309,0.000273,0.00024,0.000236,0.000297,0.000292,0.000263,0.000249,0.000271,0.000247,0.000223,0.000137,0.000161,0.000181,0.000212,0.00031,0.000317,0.000373,0.000425,0.000471,0.000454,0.000429,0.000273,0.000309,0.00024,0.000244,0.000203,0.000135,0.000163,0.000286,0.000307,0.000334,0.000292,0.000129,0.000111,0.0000246,0.00000559,0.0000208,0.0000133,0.0000772,0.000148,0.000295,0.000412,0.000394,0.000234,0.000141,0.0000892,0.000107,0.00000966,0,0,0,0,0,0,0,0,0.0000518,0.000127,0.000113,0.000293,0.000238,0.000179,0.000135,0.0000814,0.0000278,0.0000538,0,0,0,0,0,0.0000224,0.00000926,0,0.0000369,0.000153,0.00019,0.000208,0.000188,0.000085,0.0000984,0.0000199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0000416,0,0.000126,0.000157,0.000124,0.0000409,0.0000592,0.000177,0.000133,0.0000871,0.0000789,0.000127,0.000282,0.000464,0.0003,0.000315,0.000264,0.000225,0.0000413,0,0,0,0,0,0,0.0000112,0.000115,0.000253,0.000273,0.000397,0.000509,0.000467,0.000482,0.000506,0.000476,0.000473,0.000436,0.000388,0.00044,0.000295,0.000125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    "460-465":[0,0,0,0,0,0,0,0,0,0.00000619,0.0000991,3.11e-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0000115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0000797,0.000227,0.000169,0.00000585,0,0,0.0000443,0.0000929,0.0000709,0.000313,0.00012,0,0,0,0.000158,0.000303,0.000376,0.000245,0.0000587,0,0,0.00024,0.000511,0.000906,0.000906,0.00103,0.00123,0.00128,0.000978,0.000668,0.000373,0.000735,0.00108,0.00125,0.00161,0.00158,0.00167,0.00158,0.00119,0.00121,0.00093,0.000616,0.000859,0.000958,0.00108,0.00103,0.000988,0.00104,0.00122,0.00125,0.0014,0.00161,0.0017,0.00186,0.00164,0.00158,0.00154,0.00163,0.00181,0.00184,0.00199,0.00233,0.0024,0.00244,0.00223,0.00233,0.00238,0.00255,0.00286,0.00308,0.00355,0.0042,0.00493,0.00558,0.00587,0.00622,0.0068,0.00743,0.00813,0.00914,0.0106,0.0123,0.0138,0.0157,0.0181,0.0208,0.024,0.0277,0.0321,0.0369,0.0422,0.0487,0.0566,0.0657,0.076,0.0867,0.0986,0.112,0.128,0.146,0.169,0.194,0.223,0.257,0.293,0.332,0.375,0.415,0.451,0.479,0.499,0.503,0.489,0.471,0.442,0.403,0.363,0.327,0.292,0.261,0.236,0.215,0.199,0.187,0.176,0.164,0.153,0.142,0.131,0.118,0.107,0.0956,0.0846,0.0743,0.0651,0.0573,0.0516,0.0464,0.0416,0.0377,0.0347,0.0321,0.0295,0.027,0.0247,0.0225,0.0205,0.0186,0.0166,0.0149,0.0132,0.0117,0.0104,0.0094,0.00859,0.0079,0.00725,0.00664,0.00609,0.00564,0.00525,0.00485,0.00445,0.00412,0.00378,0.00347,0.00318,0.00289,0.00269,0.00251,0.00233,0.00216,0.00192,0.00174,0.00168,0.00163,0.00155,0.00145,0.00137,0.00132,0.00127,0.00122,0.00118,0.00116,0.00112,0.00107,0.00103,0.000976,0.000931,0.000828,0.000836,0.000842,0.00077,0.000734,0.000688,0.000557,0.000481,0.000453,0.000462,0.000496,0.000475,0.000435,0.00046,0.000467,0.000549,0.000583,0.000544,0.000508,0.000485,0.000511,0.000589,0.000607,0.000559,0.000481,0.000342,0.000414,0.000434,0.0004,0.000327,0.000305,0.000306,0.000421,0.000472,0.000381,0.000317,0.000277,0.000181,0.0000659,0.0000216,0.00000391,0.000089,0.000125,0.000164,0.000213,0.000246,0.000211,0.00024,0.000299,0.000328,0.00033,0.000289,0.000268,0.000206,0.000164,0.0000641,0.000092,0.000195,0.000263,0.000265,0.000304,0.000305,0.00034,0.000315,0.00019,0.000201,0.000188,0.000111,0.0000552,0.0000456,0,0,0,0,0,0,0,0,0.00000325,0.0000468,0.0000137,0.00000862,0.00000491,0,0,0,0,0.0000462,0.0000515,0.0000768,0.0000314,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
 }

// dataSetObject contains all the production data for the widget:
//     .wavelengths is an array of all the wavelengths (x axis on graph)
//     .channels is an array of objects, each of which represents a channel of light 
//         .name is the human readable name that the UI will display
//         .channelColor is a hex code that represents the color - not implemented yet, but possibly either for coloring UI elements or for a component that shows the output color
//         .values is an array of the power output at each wavelength 


//     .wavelengths and .channels.values should all have the same number of items -- at some point I will add a function to check the dataset and make sure this is the case, but it is not a priority since the data is going to be hardcoded at first.


const dataSetObject = {
    wavelengths: inputData["wavelength"],
    channels: [{
            name: '380-385',
            channelColor: '#F2F200',
            values: inputData['380-385']
        },
        {
            name: '395-400',
            channelColor: '#F2F200',
            values: inputData['395-400']
        },
        {
            name: '430',
            channelColor: '#F2F200',
            values: inputData['430']
        },
        {
            name: '450',
            channelColor: '#F2F200',
            values: inputData['450']
        },
        {
            name: '460-465',
            channelColor: '#F2F200',
            values: inputData['460-465']
        }

    ]
}

//BEGIN TEST DATA

//let factors = [10, 10, 10, 10];

let liveData = {
    factors: new Array(dataSetObject.channels.length),
    values: []
}

//END TEST DATA





const buildDisplayDataObject = (fS) => {
    let displayDataObject = [];
    dataSetObject.wavelengths.forEach((v, i) => {
        displayDataObject.push({
            pX: v,
            pY: fS[i]
        });
    });
    return displayDataObject;
}
//UI FUNCTIONS

//initialize UI using values from dataset
const buildUI = () => {
    dataSetObject.channels.forEach((obj, index) => {
        d3.select('#spectrum-controls').insert("div").html(`<label for="ch${index}">${obj.name}</label>
        <input type="range" name="ch${index}" id="ch${index}" data-channel="${index}" min="0" max="10" value="10" onchange="updateRebuild()">`);
        dB(`item at index ${index} equals ${obj}`)
    })
}
//load all multiplier values from form elements
const getFactors = () => {
    let newFactors = dataSetObject.channels.map( (item,ind)=>{
        dB(`initial value is ${item}`)
        dB(`index ${ind}`);

       return document.getElementById(`ch${ind}`).value;
    });
    liveData.factors=newFactors;
    dB(newFactors);
    
}



//Build the UI before initializing D3
buildUI();


// set the dimensions and margins of the graph
var margin = {
        top: 30,
        right: 30,
        bottom: 30,
        left: 50
    },
    width = 500,
    height = 300;

// width = document.getElementById('spectrum-canvas').clientWidth - margin.left - margin.right,
// height = document.getElementById('spectrum-controls').clientHeight - margin.top - margin.bottom;

// append the svg object to the body of the page
var svg = d3.select("#spectrum-canvas")
    .append("svg")
    .attr("viewBox", "0 0 580 380")
    .attr("preserveAspectRatio", "xMidYMid meet")
    .append("g")
    .attr("transform",
        "translate(" + margin.left + "," + margin.top + ")");

// Initialise a X axis:
var x = d3.scaleLinear().range([0, width]);
var xAxis = d3.axisBottom().scale(x);
svg.append("g")
    .attr("transform", "translate(0," + height + ")")
    .attr("class", "myXaxis")

// Initialize an Y axis
var y = d3.scaleLinear().range([height, 0]);
var yAxis = d3.axisLeft().scale(y);
svg.append("g")
    .attr("class", "myYaxis")
// add defs for gradient
const rainbowOpacity = 0.3
var defs = svg.append('defs');
var rainbowGradient = defs.append('linearGradient')
    .attr('id', 'rainbowGradient')
    .attr('x1', '0%')
    .attr('x2', '100%')
    .attr('y1', '0%')
    .attr('y2', '0%')
rainbowGradient.append('stop')
    .attr("class", "start")
    .attr("offset", "0%")
    .attr("stop-color", "violet")
    .attr("stop-opacity", rainbowOpacity);
rainbowGradient.append('stop')
    .attr("class", "start")
    .attr("offset", "20%")
    .attr("stop-color", "blue")
    .attr("stop-opacity", rainbowOpacity);
rainbowGradient.append('stop')
    .attr("class", "start")
    .attr("offset", "30%")
    .attr("stop-color", "green")
    .attr("stop-opacity", rainbowOpacity);
rainbowGradient.append('stop')
    .attr("class", "start")
    .attr("offset", "35%")
    .attr("stop-color", "yellow")
    .attr("stop-opacity", rainbowOpacity);
rainbowGradient.append('stop')
    .attr("class", "start")
    .attr("offset", "40%")
    .attr("stop-color", "orange")
    .attr("stop-opacity", rainbowOpacity);
rainbowGradient.append('stop')
    .attr("class", "start")
    .attr("offset", "50%")
    .attr("stop-color", "red")
    .attr("stop-opacity", rainbowOpacity);
rainbowGradient.append('stop')
    .attr("class", "start")
    .attr("offset", "100%")
    .attr("stop-color", "black")
    .attr("stop-opacity", rainbowOpacity);



// Create a function that takes a dataset as input and update the plot:
function update(data, time) {

    // Create the X axis:
    x.domain([300, 1100]);
    svg.selectAll(".myXaxis")
        .transition()
        .duration(time)
        .call(xAxis);

    // create the Y axis
    y.domain([0, d3.max(data, function (d) {
        return d.pY
    })]);
    svg.selectAll(".myYaxis")
        .transition()
        .duration(time)
        .call(yAxis);

    // Create a update selection: bind to the new data
    var u = svg.selectAll(".userSpecLine")
        .data([data], function (d) {
            return d.pX
        });

    // Updata the line
    u
        .enter()
        .append("path")
        .attr("class", "userSpecLine")
        .merge(u)
        .transition()
        .duration(time)
        .attr("d", d3.line()
            .x(function (d) {
                return x(d.pX);
            })
            .y(function (d) {
                return y(d.pY);
            })
            .curve(d3.curveBasis)
        )
        //.curve()
        .attr("fill", "url(#rainbowGradient")
        .attr("stroke", "white")
        .attr("stroke-width", 1)

}



// weight the values
const weightValues = (weights) => {
    return dataSetObject.channels.map((channelData, index) => {
        //process each channel data
        dB(`processing index ${index} : ${channelData}`)

        return channelData.values.map((item) => {
                //multiply each value within the array by the weight for it
                dB(`processing item ${item} within channel ${index}`)
                dB(item * weights[index])

                return item * weights[index];
            }

        )
    })

}
const sumValues = (spectrumDataset) => {
    return spectrumDataset.reduce((acc, cur) => {
        //iterate through array of spectrum values
        return acc.map((a, b) => {
            return a + cur[b]
        })
    })
}



//a simple function to smooth out the line, by averaging each element with the two nearest it
const smoothValues = (arr) => {
    return arr.map((val, ind, arr2) => {
        coll = [val];
        coll.push(val);
        coll.push(val);
        dB(`main value: ${val}`);
        if (typeof arr2[ind - 1] === 'number') {
            coll.push(arr2[ind - 1])
        } else {
            coll.push(0)
        };
        dB(`previous: ${arr2[ind - 1]}`);
        if (typeof arr2[ind + 1] === 'number') {
            coll.push(arr2[ind + 1])
        } else {
            coll.push(0)
        };;
        if (typeof arr2[ind + 2] === 'number') {
            coll.push(arr2[ind + 2])
        } else {
            coll.push(0)
        };;
        if (typeof arr2[ind - 2] === 'number') {
            coll.push(arr2[ind - 2])
        } else {
            coll.push(0)
        };;
        if (typeof arr2[ind + 3] === 'number') {
            coll.push(arr2[ind + 3])
        } else {
            coll.push(0)
        };;
        if (typeof arr2[ind - 3] === 'number') {
            coll.push(arr2[ind - 3])
        } else {
            coll.push(0)
        };;
        dB(`next: ${arr2[ind + 1]}`);
        dB(`array: ${coll}`);


        let sum = coll.reduce((a, b) => {
            return a + b
        }, 0);
        let avg = sum / coll.length;
        dB(sum);
        dB(avg);
        return avg;

    })
}


// test functions
getFactors();
let DS1 = weightValues(liveData.factors);
let DS2 = sumValues(DS1);
let DS2Smooth = smoothValues(DS2);
DS2Smooth[0] = 0;
DS2Smooth[DS2Smooth.length] = 0;
let DS3Smooth = buildDisplayDataObject(DS2Smooth);
update(DS3Smooth);



//production update functions

const rebuildData = () => {
    let DS1 = weightValues(liveData.factors);
    let DS2 = sumValues(DS1);
    let DS2Smooth = smoothValues(DS2);
    DS2Smooth[0] = 0;
    DS2Smooth[DS2Smooth.length] = 0;

    liveData.values = buildDisplayDataObject(DS2Smooth);
    update(liveData.values, 1000);
}



//function for event handler - reads multiplier data from the UI, rebuilds the dataset, and updates the graph.
const updateRebuild = () => {
    getFactors();
    rebuildData();
}

